import sys
from pathlib import Path

# Adjust the sys.path to correctly point to the backend directory
BACKEND_DIR = Path(__file__).resolve().parents[3]
ROOT_DIR = Path(__file__).resolve().parents[4] # Project root is one level above backend
sys.path.append(str(BACKEND_DIR))

import os
from dotenv import load_dotenv

# ============================================================
# KONFIGURATION - HIER ANPASSEN
# ============================================================

# User-ID (UUID) - Ersetze mit deiner echten User-ID
USER_ID = "a6a3f5e6-1d4e-4ec2-80c7-ddd257c655a1"  # Als String f√ºr einfachere Konfiguration

# Workout-ID (int) - Ersetze mit der ID des Workouts, das analysiert werden soll
WORKOUT_ID = 420  # <-- HIER DEINE WORKOUT-ID EINTRAGEN

# Datenbankwahl - True f√ºr Produktionsdatenbank, False f√ºr lokale DB
USE_PRODUCTION_DB = True  # <-- HIER ANPASSEN

# ============================================================

# Lade die richtige Umgebungskonfiguration basierend auf der Datenbankwahl
if USE_PRODUCTION_DB:
    dotenv_path = BACKEND_DIR / ".env.production"
    print(f"üîß Lade Produktions-Umgebung: {dotenv_path}")
else:
    dotenv_path = BACKEND_DIR / ".env.development"
    print(f"üîß Lade Entwicklungs-Umgebung: {dotenv_path}")

load_dotenv(dotenv_path=dotenv_path)

import asyncio
from app.llm.workout_rationale.workout_rationale_service import generate_workout_rationale
from datetime import datetime
from uuid import UUID

async def main():
    """
    Hauptfunktion f√ºr die Workout-Rationale-Generierung.
    
    Konfiguriere die drei Variablen oben und f√ºhre das Script aus.
    Das System generiert eine sportwissenschaftliche Begr√ºndung f√ºr das spezifische Workout
    und speichert sowohl den verwendeten Prompt als auch die finale Analyse im output-Ordner.
    """
    
    start_time = datetime.now()
    
    # Konvertiere User-ID zu UUID
    user_id_uuid = UUID(USER_ID)
    
    print("üß¨ Starte sportwissenschaftliche Workout-Analyse...")
    print(f"üë§ User-ID: {user_id_uuid}")
    print(f"üèãÔ∏è Workout-ID: {WORKOUT_ID}")
    print(f"üóÑÔ∏è Datenbank: {'üöÄ Produktionsdatenbank' if USE_PRODUCTION_DB else 'üíª Lokale Entwicklungsdatenbank'}")
    print()
    
    try:
        print("üìö Lade Workout-Daten, Trainingsziele und Trainingshistorie...")
        print("üß¨ Generiere wissenschaftlich fundierte Analyse...")
        
        # Generiere die sportwissenschaftliche Begr√ºndung
        rationale_text = await generate_workout_rationale(
            user_id=user_id_uuid,
            workout_id=WORKOUT_ID,
            use_production_db=USE_PRODUCTION_DB
        )
        
        # Berechne Ausf√ºhrungszeit
        end_time = datetime.now()
        duration = (end_time - start_time).total_seconds()
        
        print()
        print("=" * 80)
        print("‚úÖ SPORTWISSENSCHAFTLICHE ANALYSE ERFOLGREICH GENERIERT")
        print("=" * 80)
        print(f"üë§ User: {user_id_uuid}")
        print(f"üèãÔ∏è Workout: {WORKOUT_ID}")
        print("üß¨ Wissenschaftliche Begr√ºndung erstellt:")
        print("-" * 80)
        print(rationale_text)
        print("-" * 80)
        print()
        print("üìÅ Prompt und Analyse wurden im output-Ordner gespeichert:")
        print("   - Prompt: app/llm/workout_rationale/output/prompt_user_*_workout_*_*.md")
        print("   - Analyse: app/llm/workout_rationale/output/rationale_user_*_workout_*_*.txt")
        print(f"‚è±Ô∏è Ausf√ºhrungsdauer: {duration:.2f} Sekunden")
        print("=" * 80)
        
    except Exception as e:
        print(f"‚ùå Fehler bei der Analyse-Generierung: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    asyncio.run(main()) 