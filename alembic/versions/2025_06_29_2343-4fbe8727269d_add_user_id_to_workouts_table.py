"""add_user_id_to_workouts_table

Revision ID: 4fbe8727269d
Revises: 0a0408e665e6
Create Date: 2025-06-29 23:43:52.702276

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
import sqlmodel


# revision identifiers, used by Alembic.
revision: str = '4fbe8727269d'
down_revision: Union[str, None] = '0a0408e665e6'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    
    # Step 1: Add user_id column as nullable first
    op.add_column('workouts', sa.Column('user_id', sa.Uuid(), nullable=True))
    
    connection = op.get_bind()
    
    # Step 2: Populate user_id from training_plan relationship where possible
    connection.execute(sa.text("""
        UPDATE workouts 
        SET user_id = training_plans.user_id 
        FROM training_plans 
        WHERE workouts.training_plan_id = training_plans.id
        AND training_plans.user_id IS NOT NULL
    """))
    
    # Step 3: Handle orphaned workouts (delete them or assign to a default user)
    # Option A: Delete orphaned workouts that can't be linked to a user
    print("Checking for orphaned workouts...")
    
    # Count orphaned workouts
    result = connection.execute(sa.text("""
        SELECT COUNT(*) FROM workouts 
        WHERE user_id IS NULL
    """))
    orphaned_count = result.fetchone()[0]
    
    if orphaned_count > 0:
        print(f"Found {orphaned_count} orphaned workouts that will be deleted...")
        
        # Delete orphaned workouts (safer than trying to assign them)
        connection.execute(sa.text("""
            DELETE FROM workouts 
            WHERE user_id IS NULL
        """))
        
        print(f"Deleted {orphaned_count} orphaned workouts.")
    
    # Step 4: Now make user_id non-nullable (all remaining workouts should have a user_id)
    op.alter_column('workouts', 'user_id', nullable=False)
    
    # Step 5: Create foreign key constraint
    op.create_foreign_key(None, 'workouts', 'users', ['user_id'], ['id'])
    
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_constraint(None, 'workouts', type_='foreignkey')
    op.drop_column('workouts', 'user_id')
    # ### end Alembic commands ###
