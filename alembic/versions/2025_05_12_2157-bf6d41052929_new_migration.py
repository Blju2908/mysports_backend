"""New migration

Revision ID: bf6d41052929
Revises: 64f2f8a0cccc
Create Date: 2025-05-12 21:57:55.367935

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
import sqlmodel
from sqlalchemy.dialects import postgresql
from sqlalchemy.sql import text


# revision identifiers, used by Alembic.
revision: str = 'bf6d41052929'
down_revision: Union[str, None] = '64f2f8a0cccc'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    # Add new columns to blocks
    op.add_column('blocks', sa.Column('notes', sqlmodel.sql.sqltypes.AutoString(), nullable=True))
    
    # Add new columns to exercises
    op.add_column('exercises', sa.Column('notes', sqlmodel.sql.sqltypes.AutoString(), nullable=True))
    
    # Modify workouts
    op.add_column('workouts', sa.Column('date_created', sa.DateTime(), nullable=False, server_default=sa.func.now()))
    op.add_column('workouts', sa.Column('notes', sqlmodel.sql.sqltypes.AutoString(), nullable=True))
    
    # Create the enum type first
    op.execute("CREATE TYPE setstatus AS ENUM ('open', 'done')")
    
    # Add the new columns to sets table
    op.add_column('sets', sa.Column('plan_weight', sa.Float(), nullable=True))
    op.add_column('sets', sa.Column('plan_reps', sa.Integer(), nullable=True))
    op.add_column('sets', sa.Column('plan_duration', sa.Integer(), nullable=True))
    op.add_column('sets', sa.Column('plan_distance', sa.Float(), nullable=True))
    op.add_column('sets', sa.Column('plan_speed', sa.Float(), nullable=True))
    op.add_column('sets', sa.Column('execution_weight', sa.Float(), nullable=True))
    op.add_column('sets', sa.Column('execution_reps', sa.Integer(), nullable=True))
    op.add_column('sets', sa.Column('execution_duration', sa.Integer(), nullable=True))
    op.add_column('sets', sa.Column('execution_distance', sa.Float(), nullable=True))
    op.add_column('sets', sa.Column('execution_speed', sa.Float(), nullable=True))
    op.add_column('sets', sa.Column('status', postgresql.ENUM('open', 'done', name='setstatus', create_type=False), nullable=False, server_default='open'))
    op.add_column('sets', sa.Column('completed_at', sa.DateTime(), nullable=True))
    
    # Migrate data from the existing fields to the new fields
    connection = op.get_bind()
    
    # Copy current set data to the plan fields
    connection.execute(text("""
        UPDATE sets
        SET 
            plan_weight = weight,
            plan_reps = reps,
            plan_duration = duration,
            plan_distance = distance,
            plan_speed = speed
    """))
    
    # Check if training_history exists and then migrate data
    history_exists = connection.execute(text(
        "SELECT EXISTS ("
        "SELECT FROM information_schema.tables "
        "WHERE table_name = 'training_history'"
        ")"
    )).scalar()
    
    if history_exists:
        # Copy data from training_history to execution fields where set_id matches
        connection.execute(text("""
            UPDATE sets s
            SET 
                execution_weight = th.weight,
                execution_reps = th.reps,
                execution_duration = th.duration,
                execution_distance = th.distance,
                execution_speed = th.speed,
                status = 'done',
                completed_at = th.timestamp
            FROM training_history th
            WHERE s.id = th.set_id AND th.set_id IS NOT NULL
        """))
    
    # Now that we've migrated the data, we can drop the old columns
    op.drop_column('blocks', 'status')
    op.drop_column('sets', 'weight')
    op.drop_column('sets', 'speed')
    op.drop_column('sets', 'reps')
    op.drop_column('sets', 'distance')
    op.drop_column('sets', 'duration')
    op.drop_column('workouts', 'date')
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    # Restore original columns
    op.add_column('workouts', sa.Column('date', postgresql.TIMESTAMP(), autoincrement=False, nullable=False, server_default=sa.func.now()))
    op.add_column('sets', sa.Column('duration', sa.INTEGER(), autoincrement=False, nullable=True))
    op.add_column('sets', sa.Column('distance', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True))
    op.add_column('sets', sa.Column('reps', sa.INTEGER(), autoincrement=False, nullable=True))
    op.add_column('sets', sa.Column('speed', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True))
    op.add_column('sets', sa.Column('weight', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True))
    op.add_column('blocks', sa.Column('status', postgresql.ENUM('open', 'done', name='blockstatus'), autoincrement=False, nullable=False, server_default='open'))
    
    # Migrate data back to original format
    connection = op.get_bind()
    
    # Copy planned values back to original fields
    connection.execute(text("""
        UPDATE sets
        SET 
            weight = plan_weight,
            reps = plan_reps,
            duration = plan_duration,
            distance = plan_distance,
            speed = plan_speed
    """))
    
    # Copy date_created to date for workouts
    connection.execute(text("""
        UPDATE workouts
        SET date = date_created
    """))
    
    # Drop the new columns
    op.drop_column('workouts', 'notes')
    op.drop_column('workouts', 'date_created')
    op.drop_column('sets', 'completed_at')
    op.drop_column('sets', 'status')
    op.drop_column('sets', 'execution_speed')
    op.drop_column('sets', 'execution_distance')
    op.drop_column('sets', 'execution_duration')
    op.drop_column('sets', 'execution_reps')
    op.drop_column('sets', 'execution_weight')
    op.drop_column('sets', 'plan_speed')
    op.drop_column('sets', 'plan_distance')
    op.drop_column('sets', 'plan_duration')
    op.drop_column('sets', 'plan_reps')
    op.drop_column('sets', 'plan_weight')
    op.drop_column('exercises', 'notes')
    op.drop_column('blocks', 'notes')
    
    # Drop the enum type
    op.execute("DROP TYPE setstatus")
    # ### end Alembic commands ###
