"""New migration

Revision ID: 28697dc74903
Revises: 1c5380522512
Create Date: 2025-05-12 21:39:39.362809

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
import sqlmodel
from sqlalchemy.sql import text


# revision identifiers, used by Alembic.
revision: str = '28697dc74903'
down_revision: Union[str, None] = '1c5380522512'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    
    # Füge training_plan_id zu users-Tabelle hinzu
    op.add_column('users', sa.Column('training_plan_id', sa.Integer(), nullable=True))
    op.create_foreign_key(None, 'users', 'training_plans', ['training_plan_id'], ['id'])
    
    # Migriere Daten aus training_plan_followers in users.training_plan_id
    # Für jeden Benutzer wird der erste Trainingsplan zugeordnet
    connection = op.get_bind()
    
    # Überprüfe, ob die training_plan_followers Tabelle existiert
    table_exists = connection.execute(text(
        "SELECT EXISTS ("
        "SELECT FROM information_schema.tables "
        "WHERE table_name = 'training_plan_followers'"
        ")"
    )).scalar()
    
    if table_exists:
        # SQL-Abfrage, um den ersten Trainingsplan für jeden Benutzer zu finden
        result = connection.execute(text(
            "SELECT DISTINCT ON (user_id) user_id, training_plan_id "
            "FROM training_plan_followers "
            "ORDER BY user_id, training_plan_id"
        ))
        
        # Aktualisiere die users Tabelle mit den gefundenen Trainingsplan-IDs
        for row in result:
            connection.execute(
                text("UPDATE users SET training_plan_id = :tp_id WHERE id = :user_id"),
                {"tp_id": row[1], "user_id": row[0]}
            )
        
        # Entferne die alte Tabelle
        op.drop_table('training_plan_followers')
    
    # Aktualisiere die training_plans Tabelle mit den erforderlichen Schema-Änderungen
    op.alter_column('training_plans', 'goal',
               existing_type=sa.VARCHAR(),
               nullable=False)
    op.alter_column('training_plans', 'restrictions',
               existing_type=sa.VARCHAR(),
               nullable=False)
    op.alter_column('training_plans', 'equipment',
               existing_type=sa.VARCHAR(),
               nullable=False)
    
    # Füge workouts_per_week hinzu, falls nicht vorhanden
    column_exists = connection.execute(text(
        "SELECT EXISTS ("
        "SELECT FROM information_schema.columns "
        "WHERE table_name = 'training_plans' AND column_name = 'workouts_per_week'"
        ")"
    )).scalar()
    
    if not column_exists:
        op.add_column('training_plans', sa.Column('workouts_per_week', sa.Integer(), nullable=False, server_default='3'))
    
    # Füge description hinzu, falls nicht vorhanden
    column_exists = connection.execute(text(
        "SELECT EXISTS ("
        "SELECT FROM information_schema.columns "
        "WHERE table_name = 'training_plans' AND column_name = 'description'"
        ")"
    )).scalar()
    
    if not column_exists:
        op.add_column('training_plans', sa.Column('description', sa.String(), nullable=False, 
                                               server_default='Automatisch generierter Trainingsplan'))
    
    # Ändere den Typ von session_duration zu Integer
    op.alter_column('training_plans', 'session_duration',
               existing_type=sa.VARCHAR(),
               type_=sa.Integer(),
               nullable=False,
               postgresql_using="CASE WHEN session_duration ~ E'^\\\\d+$' THEN session_duration::integer ELSE 45 END")
    
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    connection = op.get_bind()
    
    # Erstelle die training_plan_followers Tabelle wieder
    op.create_table('training_plan_followers',
        sa.Column('user_id', sa.UUID(), nullable=False),
        sa.Column('training_plan_id', sa.Integer(), nullable=False),
        sa.ForeignKeyConstraint(['training_plan_id'], ['training_plans.id'], ondelete='CASCADE'),
        sa.ForeignKeyConstraint(['user_id'], ['users.id'], ondelete='CASCADE'),
        sa.PrimaryKeyConstraint('user_id', 'training_plan_id')
    )
    
    # Migriere Daten zurück von users zu training_plan_followers
    connection.execute(text(
        "INSERT INTO training_plan_followers (user_id, training_plan_id) "
        "SELECT id, training_plan_id FROM users WHERE training_plan_id IS NOT NULL"
    ))
    
    # Entferne foreign key und die Spalte
    op.drop_constraint(None, 'users', type_='foreignkey')
    op.drop_column('users', 'training_plan_id')
    
    # Entferne description und workouts_per_week, falls sie existieren
    column_exists = connection.execute(text(
        "SELECT EXISTS ("
        "SELECT FROM information_schema.columns "
        "WHERE table_name = 'training_plans' AND column_name = 'description'"
        ")"
    )).scalar()
    
    if column_exists:
        op.drop_column('training_plans', 'description')
    
    column_exists = connection.execute(text(
        "SELECT EXISTS ("
        "SELECT FROM information_schema.columns "
        "WHERE table_name = 'training_plans' AND column_name = 'workouts_per_week'"
        ")"
    )).scalar()
    
    if column_exists:
        op.drop_column('training_plans', 'workouts_per_week')
    
    # Ändere die anderen Spalten zurück
    op.alter_column('training_plans', 'session_duration',
               existing_type=sa.Integer(),
               type_=sa.VARCHAR(),
               nullable=True)
    op.alter_column('training_plans', 'equipment',
               existing_type=sa.VARCHAR(),
               nullable=True)
    op.alter_column('training_plans', 'restrictions',
               existing_type=sa.VARCHAR(),
               nullable=True)
    op.alter_column('training_plans', 'goal',
               existing_type=sa.VARCHAR(),
               nullable=True)
    # ### end Alembic commands ###
